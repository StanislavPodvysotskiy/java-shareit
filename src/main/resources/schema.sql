create table if not exists USERS
(
    ID INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(50) UNIQUE NOT NULL
);

create table if not exists REQUESTS
(
    ID INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    DESCRIPTION VARCHAR(255) NOT NULL,
    REQUESTER_ID INTEGER NOT NULL,
    CREATED TIMESTAMP NOT NULL
);

create table if not exists ITEMS
(
    ID INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    OWNER_ID INTEGER NOT NULL,
    NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    IS_AVAILABLE BOOLEAN NOT NULL,
    REQUEST_ID INTEGER,
    constraint ITEMS_USER_ID_FK
        foreign key (OWNER_ID) references USERS (ID),
    constraint ITEMS_REQUEST_ID_FK
        foreign key (REQUEST_ID) references REQUESTS (ID)
);

create table if not exists BOOKINGS
(
    ID INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    START_DATE TIMESTAMP NOT NULL,
    END_DATE TIMESTAMP NOT NULL,
    BOOKER_ID INTEGER NOT NULL,
    ITEM_ID INTEGER NOT NULL,
    STATUS VARCHAR(20),
    constraint BOOKINGS_BOOKER_ID_FK
        foreign key (BOOKER_ID) references USERS (ID),
    constraint BOOKINGS_OWNER_ID_FK
        foreign key (ITEM_ID) references ITEMS (ID)
);

create table if not exists COMMENTS
(
    ID INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ITEM_ID INTEGER NOT NULL,
    TEXT VARCHAR(255),
    AUTHOR_NAME VARCHAR(25) NOT NULL,
    CREATED TIMESTAMP NOT NULL,
    constraint COMMENTS_ITEM_FK
        foreign key (ITEM_ID) references ITEMS (ID)
);